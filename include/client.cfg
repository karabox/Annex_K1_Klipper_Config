## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True   ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 50.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 50.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 1.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 2.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : "ERCFSFMS"   ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
## Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro G32]
gcode:
    M84
    SET_GCODE_OFFSET Z=0
    SET_VELOCITY_LIMIT ACCEL=11000 ACCEL_TO_DECEL=11000
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=9
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
    G0 X175 Y175 Z6 F8000
    G91
    G1 Z-5 F300
    G90


[gcode_macro GTC]
gcode:
    {action_respond_info("Go to center")}
    G90
    G0 X175 Y175 F12000

[gcode_macro SKP]
gcode:
    {action_respond_info("Set position X=175 Y=175 Z=20")}
    SET_KINEMATIC_POSITION X=175 Y=175 Z=20

[gcode_macro GTP]
gcode:
    {action_respond_info("Go to park")}
    G90
    G0 X351 Y351 F12000


[gcode_macro FL]
variable_fload_len:           20

variable_fload_spd:           800
variable_fload_cnt:           95

variable_fload_spds:          200
variable_fload_cnts:          10

gcode:
    {action_respond_info("Filament loading")}
    {% for pushes in range(1, fload_cnt+1) %}
      M83
      G1 E{fload_len} F{fload_spd}
    {% endfor %}
    {% for pushes in range(1, fload_cnts+1) %}
      M83
      G1 E{fload_len} F{fload_spds}
    {% endfor %}

[gcode_macro FU]
variable_fload_len:           20
variable_fload_spd:           800
variable_fload_cnt:           105

gcode:
    {action_respond_info("Filament unloading")}
    {% for pushes in range(1, fload_cnt+1) %}
      M83
      G1 E-{fload_len} F{fload_spd}
    {% endfor %}
    
[gcode_macro PRINT_START]
gcode:
    _CASELIGHT_ON
    
    SET_FILAMENT_SENSOR SENSOR=ERCFSFMS ENABLE=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=rpi_fan TARGET=30
    
    M140 S{params.BED}          #set bed temperature and wait
    M190 S{params.BED}          #set bed temperature and do not wait
    M109 S{params.EXTRUDER}     #set hotend temperature and wait

    G32                             
    CLEAN_NOZZLE
    SET_FILAMENT_SENSOR SENSOR=ERCFSFMS ENABLE=1

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 50, th.axis_maximum.z]|min %}

    SET_FILAMENT_SENSOR SENSOR=ERCFSFMS ENABLE=0    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x} Y{th.axis_maximum.y} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=rpi_fan TARGET=35
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    M84
#[gcode_macro HOME]
#gcode:
#{% if printer.homed_axes != ‘XYZ’ %}
#force_move stepper=stepper_z1 distance=-.9 velocity=100 accel=300
#force_move stepper=stepper_z distance=-.125 velocity=100 accel=300
#{% endif %}